/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package G2M3E1.Reto05.RedFlix.vista;

import G2M3E1.Reto05.RedFlix.SpringContext;
import G2M3E1.Reto05.RedFlix.modelos.Contenido;
import G2M3E1.Reto05.RedFlix.modelos.Director;
import G2M3E1.Reto05.RedFlix.modelos.Pelicula;
import G2M3E1.Reto05.RedFlix.repositorios.ContenidoRepo;
import G2M3E1.Reto05.RedFlix.repositorios.DirectorRepo;
import G2M3E1.Reto05.RedFlix.repositorios.PeliculaRepo;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Norberto
 */
public class PeliculaPanel extends javax.swing.JPanel {

    DirectorRepo dirCont;
    ContenidoRepo cntCont;
    PeliculaRepo pelCont;

    /**
     * Creates new form UsuarioPanel
     */
    public PeliculaPanel() {
        initComponents();
        dirCont = SpringContext.getBean(DirectorRepo.class);
        cntCont = SpringContext.getBean(ContenidoRepo.class);
        pelCont = SpringContext.getBean(PeliculaRepo.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pelIdLbl = new javax.swing.JLabel();
        nomLbl = new javax.swing.JLabel();
        yearLbl = new javax.swing.JLabel();
        dirLbl = new javax.swing.JLabel();
        resLbl = new javax.swing.JLabel();
        nomJTF = new javax.swing.JTextField();
        dirJTF = new javax.swing.JTextField();
        resJTF = new javax.swing.JTextField();
        creBtn = new javax.swing.JButton();
        busBtn = new javax.swing.JButton();
        ediBtn = new javax.swing.JButton();
        eliBtn = new javax.swing.JButton();
        msgLbl = new javax.swing.JLabel();
        pelIdJTF = new javax.swing.JTextField();
        yearJTF = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setPreferredSize(new java.awt.Dimension(470, 300));

        pelIdLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        pelIdLbl.setText("Película ID");

        nomLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        nomLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nomLbl.setText("Nombre");

        yearLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        yearLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yearLbl.setText("Año");

        dirLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        dirLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dirLbl.setText("Director");

        resLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        resLbl.setText("Resumen");

        creBtn.setText("Crear");
        creBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creBtnActionPerformed(evt);
            }
        });

        busBtn.setText("Buscar");
        busBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busBtnActionPerformed(evt);
            }
        });

        ediBtn.setText("Editar");
        ediBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ediBtnActionPerformed(evt);
            }
        });

        eliBtn.setText("Eliminar");
        eliBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliBtnActionPerformed(evt);
            }
        });

        msgLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resJTF)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(creBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(busBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ediBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(eliBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(msgLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(pelIdLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nomLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(10, 10, 10)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pelIdJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(yearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(yearJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dirLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(dirJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(resLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pelIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pelIdJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dirLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dirJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(resLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(msgLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(busBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(creBtn)
                    .addComponent(eliBtn)
                    .addComponent(ediBtn))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void creBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creBtnActionPerformed
        if (nomJTF.getText().equals("") || dirJTF.getText().equals("")) {
            msgLbl.setText("Todavía faltan datos por digitar.");
            System.out.println("Todavía faltan datos por digitar.");
        } else {
            crear();
        }
    }//GEN-LAST:event_creBtnActionPerformed

    private void busBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busBtnActionPerformed
        if (pelIdJTF.getText().equals("")) {
            findPelByName();
        } else {
            findPelById(Long.parseLong(pelIdJTF.getText()));
        }
    }//GEN-LAST:event_busBtnActionPerformed

    private void ediBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ediBtnActionPerformed
        if (pelCont.findById(Long.parseLong(pelIdJTF.getText())).isPresent()) {
            actualizar();
        } else {
            msgLbl.setText("El Id de la película selecionado no se encuentra en "
                    + "la base de datos.");
            System.out.println("El Id de la película selecionado no se encuentra en "
                    + "la base de datos.");
        }
    }//GEN-LAST:event_ediBtnActionPerformed

    private void eliBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliBtnActionPerformed
        if (!pelIdJTF.getText().equals("")) {
            eliminar();
        }
    }//GEN-LAST:event_eliBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton busBtn;
    private javax.swing.JButton creBtn;
    private javax.swing.JTextField dirJTF;
    private javax.swing.JLabel dirLbl;
    private javax.swing.JButton ediBtn;
    private javax.swing.JButton eliBtn;
    private javax.swing.JLabel msgLbl;
    private javax.swing.JTextField nomJTF;
    private javax.swing.JLabel nomLbl;
    private javax.swing.JTextField pelIdJTF;
    private javax.swing.JLabel pelIdLbl;
    private javax.swing.JTextField resJTF;
    private javax.swing.JLabel resLbl;
    private javax.swing.JTextField yearJTF;
    private javax.swing.JLabel yearLbl;
    // End of variables declaration//GEN-END:variables

    public void limpiarCampos() {
        dirJTF.setText("");
        pelIdJTF.setText("");
        yearJTF.setText("");
        nomJTF.setText("");
        resJTF.setText("");
        msgLbl.setText("");
    }

    public Pelicula formulario() {
        Pelicula pel = new Pelicula();
        pel.setPelSum(resJTF.getText());
        pel.setPelYear(Long.parseLong(yearJTF.getText()));
        return pel;
    }

    public void crear() {
        Long dirId, contId;
        dirId = directorId();
        contId = contenidoId();
        if (cntCont.findById(contId).isPresent()) {
            msgLbl.setText("La película ya se encuentra en la base de datos.");
            System.out.println("La película ya se encuentra en la base de datos.");
        } else {
            crearActualizarPel(dirId, contId, "Se registró correctamente la película ",
                    "Ocurrió un error al crear la nueva película.");
        }
    }

    public Long directorId() {
        for (Director dir : dirCont.findAll()) {
            if (dirJTF.getText().equals(dir.getDirName() + " " + dir.getDirLast())) {
                return dir.getDirId();
            }
        }
        Long dirId = nuevoDirId();
        crearDirector(dirId);
        return dirId;
    }

    public Long nuevoDirId() {
        List<Director> nuevo = dirCont.findAll();
        if (!nuevo.isEmpty()) {
            return (nuevo.get(nuevo.size() - 1)).getDirId() + 1L;
        } else {
            return 101L;
        }
    }

    public void crearDirector(Long id) {
        Director dire = new Director();
        dire.setDirId(id);
        String[] nombre = dirJTF.getText().split(" ");
        dire.setDirName(nombre[0]);
        dire.setDirLast(nombre[1]);
        dirCont.save(dire);
    }

    public Long contenidoId() {
        for (Contenido cont : cntCont.findAll()) {
            if (nomJTF.getText().equals(cont.getContName())) {
                return cont.getContId();
            }
        }
        return nuevoContId();
    }

    public Long nuevoContId() {
        List<Contenido> nuevo = cntCont.findAll();
        Long id = 1000L;
        if (!nuevo.isEmpty()) {
            for (Contenido salida : nuevo) {
                if (salida.getContId() < 2000) {
                    id = salida.getContId();
                } else {
                    break;
                }
            }
            return id + 1L;
        } else {
            return 1001L;
        }
    }

    public void crearContenido(Long id) {
        Contenido cont = new Contenido();
        cont.setContName(nomJTF.getText());
        cont.setContId(id);
        cntCont.save(cont);
    }

    public void crearActualizarPel(Long idDir, Long idCont, String texto1,
            String texto2) {
        Pelicula pel = formulario();
        crearContenido(idCont);
        pel.setDirId(idDir);
        pel.setContId(idCont);
        try {
            pelCont.save(pel);
            pelIdJTF.setText(idCont.toString());
            msgLbl.setText(texto1 + nomJTF.getText());
            System.out.println(texto1 + nomJTF.getText());
        } catch (Exception e) {
            msgLbl.setText(texto2);
            System.out.println(texto2);
        }
        /*Pelicula pel = formulario();
        crearContenido(idCont);
        pel.setDirId(idDir);
        pel.setContId(idCont);
        try {
            pelCont.save(pel);
            pelIdJFTF.setText(idCont.toString());
            msgLbl.setText("Se actualizó correctamente la película "
                    + nomJTF.getText());
            System.out.println("Se actualizó correctamente la película "
                    + nomJTF.getText());
        } catch (Exception e) {
            msgLbl.setText("Ocurrió un error al actualizar la película.");
            System.out.println("Ocurrió un error al crear la nueva película.");
        }*/
    }

    public void findPelByName() {
        if (!nomJTF.getText().equals("")) {
            for (Contenido cont : cntCont.findAll()) {
                if (cont.getContName().equals(nomJTF.getText())) {
                    nomJTF.setText(cont.getContName());
                    pelIdJTF.setText(cont.getContId().toString());
                    Pelicula pel = pelCont.findById(cont.getContId()).get();
                    resJTF.setText(pel.getPelSum());
                    yearJTF.setText(pel.getPelYear().toString());
                    Director dir = dirCont.findById(pel.getDirId()).get();
                    dirJTF.setText(dir.getDirName() + " " + dir.getDirLast());
                    msgLbl.setText("Se ha encontrado la película "
                            + cont.getContName());
                    System.out.println("Se ha encontrado la película "
                            + cont.getContName());
                    return;
                }
            }
            msgLbl.setText("No existe ninguna película con nombre: "
                    + nomJTF.getText());
            System.out.println("No existe ninguna película con nombre: "
                    + nomJTF.getText());
        } else {
            msgLbl.setText("Todavía faltan datos por digitar.");
            System.out.println("Todavía faltan datos por digitar.");
        }
    }

    public void findPelById(Long id) {
        if (cntCont.findById(id).isPresent()) {
            Contenido cont = cntCont.findById(id).get();
            nomJTF.setText(cont.getContName());
            pelIdJTF.setText(cont.getContId().toString());
            Pelicula pel = pelCont.findById(cont.getContId()).get();
            resJTF.setText(pel.getPelSum());
            yearJTF.setText(pel.getPelYear().toString());
            Director dir = dirCont.findById(pel.getDirId()).get();
            dirJTF.setText(dir.getDirName() + " " + dir.getDirLast());
            msgLbl.setText("Se ha encontrado la película " + cont.getContName());
            System.out.println("Se ha encontrado la película " + cont.getContName());
        } else {
            msgLbl.setText("No existe ninguna película con Id: "
                    + pelIdJTF.getText());
            System.out.println("No existe ninguna película con Id: "
                    + pelIdJTF.getText());
        }
    }

    public void actualizar() {
        Long dirId, contId;
        dirId = directorId();
        contId = Long.parseLong(pelIdJTF.getText());
        crearActualizarPel(dirId, contId, "Se actualizó correctamente la película ",
                    "Ocurrió un error al actualizar la película.");
    }

    public void eliminar() {
        int verificar = JOptionPane.showConfirmDialog(this, "¿Esta seguro que"
                + " desea eliminar?", "Eliminación", JOptionPane.YES_NO_OPTION);
        if (verificar == 0) {
            try {
                pelCont.deleteById(Long.parseLong(pelIdJTF.getText()));
                String nombre = cntCont.findById(Long.parseLong(pelIdJTF.getText())).get().getContName();
                cntCont.deleteById(Long.parseLong(pelIdJTF.getText()));
                msgLbl.setText("Se eliminó la película " + nombre);
                System.out.println("Se eliminó la película " + nombre);
            } catch (Exception e) {
                msgLbl.setText("No se pudo realizar el proceso de eliminación");
                System.out.println("No se pudo realizar el proceso de eliminación");
            }
        }
    }
}
