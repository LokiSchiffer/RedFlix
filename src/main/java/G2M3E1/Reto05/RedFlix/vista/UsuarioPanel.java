/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package G2M3E1.Reto05.RedFlix.vista;

import G2M3E1.Reto05.RedFlix.SpringContext;
import G2M3E1.Reto05.RedFlix.modelos.Usuario;
import G2M3E1.Reto05.RedFlix.repositorios.UsuarioRepo;
import javax.swing.JOptionPane;

/**
 *
 * @author Norberto
 */
public class UsuarioPanel extends javax.swing.JPanel {

    private UsuarioRepo userCont;

    /**
     * Creates new form PeliculaPanel
     */
    public UsuarioPanel() {
        initComponents();
        userCont = SpringContext.getBean(UsuarioRepo.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        creBtn = new javax.swing.JButton();
        busBtn = new javax.swing.JButton();
        ediBtn = new javax.swing.JButton();
        eliBtn = new javax.swing.JButton();
        nameLbl = new javax.swing.JLabel();
        nameJTF = new javax.swing.JTextField();
        lastLbl = new javax.swing.JLabel();
        lastJTF = new javax.swing.JTextField();
        aliasLbl = new javax.swing.JLabel();
        aliasJTF = new javax.swing.JTextField();
        passLbl = new javax.swing.JLabel();
        passJPF = new javax.swing.JPasswordField();
        mailLbl = new javax.swing.JLabel();
        mailJTF = new javax.swing.JTextField();
        celLbl = new javax.swing.JLabel();
        celJFTF = new javax.swing.JFormattedTextField();
        birthLbl = new javax.swing.JLabel();
        birthJFTF = new javax.swing.JFormattedTextField();
        msgLbl = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setPreferredSize(new java.awt.Dimension(470, 300));

        creBtn.setText("Crear");
        creBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creBtnActionPerformed(evt);
            }
        });

        busBtn.setText("Buscar");
        busBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busBtnActionPerformed(evt);
            }
        });

        ediBtn.setText("Editar");
        ediBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ediBtnActionPerformed(evt);
            }
        });

        eliBtn.setText("Eliminar");
        eliBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliBtnActionPerformed(evt);
            }
        });

        nameLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        nameLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLbl.setText("Nombre");

        lastLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        lastLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lastLbl.setText("Apellido");

        aliasLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        aliasLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        aliasLbl.setText("Alias");

        passLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        passLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passLbl.setText("Password");

        mailLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        mailLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mailLbl.setText("E-mail");

        celLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        celLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        celLbl.setText("Celular");

        celJFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        birthLbl.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        birthLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        birthLbl.setText("Fecha de nacimiento");

        birthJFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msgLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(creBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(busBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ediBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(eliBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(passLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passJPF, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(nameJTF))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lastLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lastJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(aliasLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(aliasJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mailLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mailJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(celLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(celJFTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(birthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(birthJFTF)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passJPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aliasLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aliasJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mailLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mailJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(celLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(celJFTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(birthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthJFTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(msgLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(busBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(creBtn)
                    .addComponent(eliBtn)
                    .addComponent(ediBtn))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void creBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creBtnActionPerformed
        if (userCont.findById(aliasJTF.getText()).isPresent()) {
            msgLbl.setText("Lo sentimos el usuario no se encuentra disponible.");
            System.out.println("Lo sentimos el usuario no se encuentra disponible.");
        } else {
            crearActualizar("Se registró exitosamente el usuario ",
                    "Ocurrió un error al crear el nuevo usuario ", 0);
        }
    }//GEN-LAST:event_creBtnActionPerformed

    private void busBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busBtnActionPerformed
        if (aliasJTF.getText().equals("")) {
            findUserByName();
        } else {
            findUserById(aliasJTF.getText());
        }
    }//GEN-LAST:event_busBtnActionPerformed

    private void ediBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ediBtnActionPerformed
        if (userCont.findById(aliasJTF.getText()).isPresent()) {
            crearActualizar("Se actualizó correctamente el usuario ",
                    "Ocurrió un error al actualizar el usuario ", 1);
        } else {
            msgLbl.setText("El nombre de usuario selecionado no se encuentra "
                    + "en la base de datos.");
            System.out.println("El nombre de usuario selecionado no se encuentra "
                    + "en la base de datos.");
        }
    }//GEN-LAST:event_ediBtnActionPerformed

    private void eliBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliBtnActionPerformed
        if (!aliasJTF.getText().equals("")) {
            eliminar();
        }
    }//GEN-LAST:event_eliBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aliasJTF;
    private javax.swing.JLabel aliasLbl;
    private javax.swing.JFormattedTextField birthJFTF;
    private javax.swing.JLabel birthLbl;
    private javax.swing.JButton busBtn;
    private javax.swing.JFormattedTextField celJFTF;
    private javax.swing.JLabel celLbl;
    private javax.swing.JButton creBtn;
    private javax.swing.JButton ediBtn;
    private javax.swing.JButton eliBtn;
    private javax.swing.JTextField lastJTF;
    private javax.swing.JLabel lastLbl;
    private javax.swing.JTextField mailJTF;
    private javax.swing.JLabel mailLbl;
    private javax.swing.JLabel msgLbl;
    private javax.swing.JTextField nameJTF;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JPasswordField passJPF;
    private javax.swing.JLabel passLbl;
    // End of variables declaration//GEN-END:variables

    public void limpiarCampos() {
        aliasJTF.setText("");
        nameJTF.setText("");
        lastJTF.setText("");
        passJPF.setText("");
        mailJTF.setText("");
        celJFTF.setText("");
        birthJFTF.setText("");
        msgLbl.setText("");
    }

    public Usuario formulario() {
        Usuario usr = new Usuario();
        usr.setUsrId(aliasJTF.getText());
        usr.setUsrName(nameJTF.getText());
        usr.setUsrLast(lastJTF.getText());
        usr.setUsrPass(passJPF.getText());
        usr.setUsrEmail(mailJTF.getText());
        if (!celJFTF.getText().equals("")) {
            usr.setUsrCel(Long.parseLong(celJFTF.getText()));
        }
        if (!birthJFTF.getText().equals("")) {
            usr.setUsrBirth(birthJFTF.getText());
        }
        return usr;
    }

    public void crearActualizar(String texto1, String texto2, int id) {
        if (!aliasJTF.getText().equals("") && !passJPF.getText().equals("")
                && !nameJTF.getText().equals("") && !lastJTF.getText().equals("")) {
            Usuario user = formulario();
            try {
                userCont.save(user);
                if (id == 0) {
                    msgLbl.setText(texto1 + user.getUsrId());
                    System.out.println(texto1 + user.getUsrId());
                } else {
                    msgLbl.setText(texto1 + user.getUsrName() + " "
                            + user.getUsrLast());
                    System.out.println(texto1 + user.getUsrName() + " "
                            + user.getUsrLast());
                }
            } catch (Exception e) {
                msgLbl.setText(texto2 + aliasJTF.getText());
                System.out.println(texto2 + aliasJTF.getText());
            }
        } else {
            msgLbl.setText("Todavía faltan datos por digitar.");
            System.out.println("Todavía faltan datos por digitar.");
        }
        /*if (!aliasJTF.getText().equals("") && !passJPF.getText().equals("")
                && !nameJTF.getText().equals("") && !lastJTF.getText().equals("")) {
            Usuario user = formulario();
            try {
                userCont.save(user);
                msgLbl.setText("Se actualizó correctamente el usuario "
                        + user.getUsrName() + " " + user.getUsrLast());
                System.out.println("Se actualizó correctamente el usuario "
                        + user.getUsrName() + " " + user.getUsrLast());
            } catch (Exception e) {
                msgLbl.setText("Ocurrió un error al actualizar el usuario "
                        + aliasJTF.getText());
                System.out.println("Ocurrió un error al actualizar el usuario "
                        + aliasJTF.getText());
            }
        } else {
            msgLbl.setText("Todavía faltan datos por digitar.");
            System.out.println("Todavía faltan datos por digitar.");
        }*/
    }

    public void findUserByName() {
        if (!nameJTF.getText().equals("") && !lastJTF.getText().equals("")) {
            for (Usuario usr : userCont.findAll()) {
                if (usr.getUsrName().equals(nameJTF.getText())
                        && usr.getUsrLast().equals(lastJTF.getText())) {
                    aliasJTF.setText(usr.getUsrId());
                    nameJTF.setText(usr.getUsrName());
                    lastJTF.setText(usr.getUsrLast());
                    passJPF.setText(usr.getUsrPass());
                    if (!usr.getUsrEmail().isEmpty()) {
                        mailJTF.setText(usr.getUsrEmail());
                    } else {
                        mailJTF.setText("");
                    }
                    if (!(usr.getUsrCel() == null)) {
                        celJFTF.setText(usr.getUsrCel().toString());
                    } else {
                        celJFTF.setText("");
                    }
                    if (!(usr.getUsrBirth() == null)) {
                        birthJFTF.setText(usr.getUsrBirth());
                    } else {
                        birthJFTF.setText("");
                    }
                    msgLbl.setText("Se ha encontrado al usuario "
                            + usr.getUsrName() + " " + usr.getUsrLast());
                    System.out.println("Se ha encontrado al usuario "
                            + usr.getUsrName() + " " + usr.getUsrLast());
                    return;
                }
            }
            msgLbl.setText("No existe ningún usuario con nombre: "
                    + nameJTF.getText() + " " + lastJTF.getText());
            System.out.println("No existe ningún usuario con nombre: "
                    + nameJTF.getText() + " " + lastJTF.getText());
        } else {
            msgLbl.setText("Todavía faltan datos por digitar.");
            System.out.println("Todavía faltan datos por digitar.");
        }
    }

    public void findUserById(String alias) {
        if (userCont.findById(alias).isPresent()) {
            Usuario user = userCont.findById(alias).get();
            aliasJTF.setText(user.getUsrId());
            nameJTF.setText(user.getUsrName());
            lastJTF.setText(user.getUsrLast());
            passJPF.setText(user.getUsrPass());
            if (!user.getUsrEmail().isEmpty()) {
                mailJTF.setText(user.getUsrEmail());
            } else {
                mailJTF.setText("");
            }
            if (!(user.getUsrCel() == null)) {
                celJFTF.setText(user.getUsrCel().toString());
            } else {
                celJFTF.setText("");
            }
            if (!(user.getUsrBirth() == null)) {
                birthJFTF.setText(user.getUsrBirth());
            } else {
                birthJFTF.setText("");
            }
            msgLbl.setText("Se ha encontrado al usuario " + user.getUsrId());
            System.out.println("Se ha encontrado al usuario " + user.getUsrId());
        } else {
            msgLbl.setText("No existe ningún usuario con alias: "
                    + aliasJTF.getText());
            System.out.println("No existe ningún usuario con alias: "
                    + aliasJTF.getText());
        }
    }

    public void eliminar() {
        int verificar = JOptionPane.showConfirmDialog(this, "¿Esta seguro que"
                + " desea eliminar?", "Eliminación", JOptionPane.YES_NO_OPTION);
        if (verificar == 0) {
            try {
                userCont.deleteById(aliasJTF.getText());
                msgLbl.setText("Se eliminó al usuario " + aliasJTF.getText());
                System.out.println("Se eliminó al usuario " + aliasJTF.getText());
            } catch (Exception e) {
                msgLbl.setText("No se pudo realizar el proceso de eliminación");
                System.out.println("No se pudo realizar el proceso de eliminación");
            }
        }
    }
}
